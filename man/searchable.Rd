% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/Class-searchable.R
\docType{class}
\name{searchable-class}
\alias{searchable}
\alias{searchable-class}
\alias{show,searchable-method}
\title{searchable}
\usage{
searchable(object, ...)

\S4method{show}{searchable}(object)
}
\arguments{
\item{object}{searchable object or object to be made searchable}

\item{...}{additional arguments defining the search pattern. See
  \code{?pattern} for details.}
}
\value{
By default, extraction from a searchable objects does not produce a subset
  that is also searchable. It is assumed that in most cases, the developer
  will not want another searchable object and only wish to have the subclass.
}
\description{
Marks an objects as searchable, optionally specifying the default search
options
}
\details{
The searchable class allows for non-standard, 'stringr'-like searches when
extracting (or replacing) objects. The following search types are supported:

\itemize{
  \item \code{regex} for regular expression matching,
  \item \code{fixed} for fixed string matching,
  \item \code{coll} for collation matching,
  \item \code{standard} for standard R matching
}
}
\section{Slots}{

\describe{
\item{\code{pattern}}{used as the default method for searching an objects names}
}}
\note{
- Environments cannot be (easily) be made "searchable" due to the way the
    they are implemented.

  - The extraction methods for searchable objects are (at present) limited to
    only one pattern. This may change in the future.
}
\section{Diffences from stringr}{


\code{stringr} is a general purpose string manipulations library; amoung its
functions is the ability to search/pattern match against strings.
\code{searchable} applies this type of matching  to allow searching objects'
names using standard R accessors: \code{\[}, \code{\$}, \code{\[\[}.

Unlike \code{stringr} which allows search modifiers to apply to only the
search pattern, \code{searchable} also modifiers to be applied to
the search target. Unless overridden, all subsequent searches of searchable
objects will use the predefinced pattern.

This search used can be specified at initialization of the searchable object
or any subsequent time any of the match-modifying functions, e.g.
\code{fixed}, \code{perl}, \code{ignore.case}, etc. See examples.

When modifiers are applied to both target and pattern, \strong{modifers
applied to the pattern take precedence} and the target's modifiers are disabled.
}

\section{Differences from base R}{


\code{searchable} is designed to be minimally invase. When no search types
or options are specified, searchable objects default to R's use of standard
accessors.

When a search type or options are specified, R's accessors work as
expected with a few, small changes to accomodate an indeterminate number
of search results. These are:

\itemize{

  \item \code{\$} works with atomic, searchable objects. This is not true of
        R's atomic objects. This should probably be fixed in Base R.

  \item Searches using \code{\[\[]} or \code{\$} may have more than one match.
        In order to be consistent with base R, searches with multiple matches
        produce an error: \code{attempt to select more than one element}.

  \item Searches using \code{\[} accepts a one element search
        pattern. (This may change). Attempts to provide multiple search terms
        results in an error:
           \code{pattern string should be a one-element character vector}.

        In base R, there is output value every element of input argument,
        \code{i}. Input elements that do not match a named element of
        \code{x} return \code{NA}. Because of the indeterminant number of
        matches given a pattern search against a \code{searchable} object,
        there is no guarantee that a search pattern have a match. If no
        matches are found, a zero-length object is returned. (This may change
        to \code{NA} to be more consisitent.)

  \item Searches do not produce a searchable class but the superclass that
        the searchable class wraps.

}
}

\section{replacement}{


\code{searchable} can be used to replace objects as well. See \code{?extract}
for additional exemples.
}

\section{multiple dimension objects}{


Multiple dimension ojects such as data.frames, data.tables, matrices and
arrays are not supported at this time.
}
\examples{
# ATOMIC VECTORS:
    v <- c( a=1, b=2, B=3, c=4, c2=5 )
    sv <- searchable(v)

  # EXTRACT:
    sv$a

    sv[['a']]
    sv[[ ignore.case('A') ]]

    sv[ ignore.case('b') ]
    sv[ perl('c') ]
    sv[ fixed('c') ]


  # REPLACEMENT:
    sv$a               <- "first"
    sv[['a']]          <- "1st"
    sv[[ perl('c.') ]] <- "third"

    sv[ perl('c.?') ]   <- "3rd"


  # MODIFIERS TO SEARCH TARGET/OBJECT
    sv <- searchable(v, ignore.case )
    sv$A
    sv['b']
    sv['B']


  # RECURSIVE LISTS:
    l <- list( a=1, b=2, c=3 )
    sl <- searchable(l)
    sl[["b"]]
    sl[[ ignore.case("B") ]]

  # USE WITH MAGRITTR
   \dontrun{
    sl[[ "B"  \%>\% ignore.case ]]
    "b" \%>\% sl[[.]]
    "B" \%>\% ignore.case \%>\% sl[[ . ]]
   }
}
\seealso{
\code{\link{extract}}              \cr
  \code{\link[stringr]{ignore.case}} \cr
  \code{\link[stringr]{perl}}        \cr
  \code{\link{reverse.lookup}}       \cr
}

